/**
 * SLCEE-2023-PC Arena
 * **SAP Labs CEE Hub Programming Competition 2023 Arena server**.  You can find more information about the game and the competititon rules at [github/SLCEE-2023-PC-public](https://github.com/afarago/SLCEE-2023-PC-public).   For a test run, you can use the crash test dummy user `000000000000000000000000/dummypass`.   *Note: All the APIs expect and return application/json*.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: DL SLCEE 2023 PC <DL_637A3F6466D808029A65636A@global.corp.sap>
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MatchEventDTO from './MatchEventDTO';

/**
 * The MoveDTO model module.
 * @module model/MoveDTO
 * @version 1.0.0
 */
class MoveDTO {
    /**
     * Constructs a new <code>MoveDTO</code>.
     * Match Response Movement DTO  deliver selectively timestamp, sequence along with DTO array of events
     * @alias module:model/MoveDTO
     * @param at {Date} 
     * @param sequenceId {Number} 
     * @param turnId {Number} 
     * @param sequenceInTurnId {Number} 
     * @param events {Array.<module:model/MatchEventDTO>} 
     */
    constructor(at, sequenceId, turnId, sequenceInTurnId, events) { 
        
        MoveDTO.initialize(this, at, sequenceId, turnId, sequenceInTurnId, events);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, at, sequenceId, turnId, sequenceInTurnId, events) { 
        obj['at'] = at;
        obj['sequenceId'] = sequenceId;
        obj['turnId'] = turnId;
        obj['sequenceInTurnId'] = sequenceInTurnId;
        obj['events'] = events;
    }

    /**
     * Constructs a <code>MoveDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MoveDTO} obj Optional instance to populate.
     * @return {module:model/MoveDTO} The populated <code>MoveDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MoveDTO();

            if (data.hasOwnProperty('at')) {
                obj['at'] = ApiClient.convertToType(data['at'], 'Date');
            }
            if (data.hasOwnProperty('sequenceId')) {
                obj['sequenceId'] = ApiClient.convertToType(data['sequenceId'], 'Number');
            }
            if (data.hasOwnProperty('turnId')) {
                obj['turnId'] = ApiClient.convertToType(data['turnId'], 'Number');
            }
            if (data.hasOwnProperty('sequenceInTurnId')) {
                obj['sequenceInTurnId'] = ApiClient.convertToType(data['sequenceInTurnId'], 'Number');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [MatchEventDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MoveDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MoveDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MoveDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                MatchEventDTO.validateJsonObject(item);
            };
        }

        return true;
    }


}

MoveDTO.RequiredProperties = ["at", "sequenceId", "turnId", "sequenceInTurnId", "events"];

/**
 * @member {Date} at
 */
MoveDTO.prototype['at'] = undefined;

/**
 * @member {Number} sequenceId
 */
MoveDTO.prototype['sequenceId'] = undefined;

/**
 * @member {Number} turnId
 */
MoveDTO.prototype['turnId'] = undefined;

/**
 * @member {Number} sequenceInTurnId
 */
MoveDTO.prototype['sequenceInTurnId'] = undefined;

/**
 * @member {Array.<module:model/MatchEventDTO>} events
 */
MoveDTO.prototype['events'] = undefined;






export default MoveDTO;

