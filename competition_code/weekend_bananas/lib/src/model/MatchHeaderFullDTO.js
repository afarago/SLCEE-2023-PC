/**
 * SLCEE-2023-PC Arena
 * **SAP Labs CEE Hub Programming Competition 2023 Arena server**.  You can find more information about the game and the competititon rules at [github/SLCEE-2023-PC-public](https://github.com/afarago/SLCEE-2023-PC-public).   For a test run, you can use the crash test dummy user `000000000000000000000000/dummypass`.   *Note: All the APIs expect and return application/json*.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: DL SLCEE 2023 PC <DL_637A3F6466D808029A65636A@global.corp.sap>
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MatchHeaderFullDTOPlayerdataInner from './MatchHeaderFullDTOPlayerdataInner';
import MatchHeaderFullDTOTable from './MatchHeaderFullDTOTable';

/**
 * The MatchHeaderFullDTO model module.
 * @module model/MatchHeaderFullDTO
 * @version 1.0.0
 */
class MatchHeaderFullDTO {
    /**
     * Constructs a new <code>MatchHeaderFullDTO</code>.
     * @alias module:model/MatchHeaderFullDTO
     * @param id {String} Stringified Object Id.
     * @param sequence {String} 
     * @param lastmoveat {Date} 
     * @param finished {Boolean} 
     * @param table {module:model/MatchHeaderFullDTOTable} 
     * @param playerdata {Array.<module:model/MatchHeaderFullDTOPlayerdataInner>} 
     * @param startedat {Date} 
     * @param playernames {Array.<String>} 
     */
    constructor(id, sequence, lastmoveat, finished, table, playerdata, startedat, playernames) { 
        
        MatchHeaderFullDTO.initialize(this, id, sequence, lastmoveat, finished, table, playerdata, startedat, playernames);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, sequence, lastmoveat, finished, table, playerdata, startedat, playernames) { 
        obj['id'] = id;
        obj['sequence'] = sequence;
        obj['lastmoveat'] = lastmoveat;
        obj['finished'] = finished;
        obj['table'] = table;
        obj['playerdata'] = playerdata;
        obj['startedat'] = startedat;
        obj['playernames'] = playernames;
    }

    /**
     * Constructs a <code>MatchHeaderFullDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MatchHeaderFullDTO} obj Optional instance to populate.
     * @return {module:model/MatchHeaderFullDTO} The populated <code>MatchHeaderFullDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MatchHeaderFullDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'String');
            }
            if (data.hasOwnProperty('lastmoveat')) {
                obj['lastmoveat'] = ApiClient.convertToType(data['lastmoveat'], 'Date');
            }
            if (data.hasOwnProperty('finished')) {
                obj['finished'] = ApiClient.convertToType(data['finished'], 'Boolean');
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = MatchHeaderFullDTOTable.constructFromObject(data['table']);
            }
            if (data.hasOwnProperty('playerdata')) {
                obj['playerdata'] = ApiClient.convertToType(data['playerdata'], [MatchHeaderFullDTOPlayerdataInner]);
            }
            if (data.hasOwnProperty('startedat')) {
                obj['startedat'] = ApiClient.convertToType(data['startedat'], 'Date');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('playernames')) {
                obj['playernames'] = ApiClient.convertToType(data['playernames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MatchHeaderFullDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MatchHeaderFullDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MatchHeaderFullDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['sequence'] && !(typeof data['sequence'] === 'string' || data['sequence'] instanceof String)) {
            throw new Error("Expected the field `sequence` to be a primitive type in the JSON string but got " + data['sequence']);
        }
        // validate the optional field `table`
        if (data['table']) { // data not null
          MatchHeaderFullDTOTable.validateJSON(data['table']);
        }
        if (data['playerdata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['playerdata'])) {
                throw new Error("Expected the field `playerdata` to be an array in the JSON data but got " + data['playerdata']);
            }
            // validate the optional field `playerdata` (array)
            for (const item of data['playerdata']) {
                MatchHeaderFullDTOPlayerdataInner.validateJsonObject(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['playernames'])) {
            throw new Error("Expected the field `playernames` to be an array in the JSON data but got " + data['playernames']);
        }

        return true;
    }


}

MatchHeaderFullDTO.RequiredProperties = ["id", "sequence", "lastmoveat", "finished", "table", "playerdata", "startedat", "playernames"];

/**
 * Stringified Object Id.
 * @member {String} id
 */
MatchHeaderFullDTO.prototype['id'] = undefined;

/**
 * @member {String} sequence
 */
MatchHeaderFullDTO.prototype['sequence'] = undefined;

/**
 * @member {Date} lastmoveat
 */
MatchHeaderFullDTO.prototype['lastmoveat'] = undefined;

/**
 * @member {Boolean} finished
 */
MatchHeaderFullDTO.prototype['finished'] = undefined;

/**
 * @member {module:model/MatchHeaderFullDTOTable} table
 */
MatchHeaderFullDTO.prototype['table'] = undefined;

/**
 * @member {Array.<module:model/MatchHeaderFullDTOPlayerdataInner>} playerdata
 */
MatchHeaderFullDTO.prototype['playerdata'] = undefined;

/**
 * @member {Date} startedat
 */
MatchHeaderFullDTO.prototype['startedat'] = undefined;

/**
 * @member {Array.<String>} tags
 */
MatchHeaderFullDTO.prototype['tags'] = undefined;

/**
 * @member {Array.<String>} playernames
 */
MatchHeaderFullDTO.prototype['playernames'] = undefined;






export default MatchHeaderFullDTO;

