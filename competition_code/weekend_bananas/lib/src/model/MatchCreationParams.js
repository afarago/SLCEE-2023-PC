/**
 * SLCEE-2023-PC Arena
 * **SAP Labs CEE Hub Programming Competition 2023 Arena server**.  You can find more information about the game and the competititon rules at [github/SLCEE-2023-PC-public](https://github.com/afarago/SLCEE-2023-PC-public).   For a test run, you can use the crash test dummy user `000000000000000000000000/dummypass`.   *Note: All the APIs expect and return application/json*.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: DL SLCEE 2023 PC <DL_637A3F6466D808029A65636A@global.corp.sap>
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Card from './Card';

/**
 * The MatchCreationParams model module.
 * @module model/MatchCreationParams
 * @version 1.0.0
 */
class MatchCreationParams {
    /**
     * Constructs a new <code>MatchCreationParams</code>.
     * Match creation parameters including players, drawpile, discardpile and randomseed
     * @alias module:model/MatchCreationParams
     */
    constructor() { 
        
        MatchCreationParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MatchCreationParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MatchCreationParams} obj Optional instance to populate.
     * @return {module:model/MatchCreationParams} The populated <code>MatchCreationParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MatchCreationParams();

            if (data.hasOwnProperty('playerids')) {
                obj['playerids'] = ApiClient.convertToType(data['playerids'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('playArea')) {
                obj['playArea'] = ApiClient.convertToType(data['playArea'], [Card]);
            }
            if (data.hasOwnProperty('drawPile')) {
                obj['drawPile'] = ApiClient.convertToType(data['drawPile'], [Card]);
            }
            if (data.hasOwnProperty('discardPile')) {
                obj['discardPile'] = ApiClient.convertToType(data['discardPile'], [Card]);
            }
            if (data.hasOwnProperty('banks')) {
                obj['banks'] = ApiClient.convertToType(data['banks'], [[Card]]);
            }
            if (data.hasOwnProperty('randomSeed')) {
                obj['randomSeed'] = ApiClient.convertToType(data['randomSeed'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MatchCreationParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MatchCreationParams</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['playerids'])) {
            throw new Error("Expected the field `playerids` to be an array in the JSON data but got " + data['playerids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        if (data['playArea']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['playArea'])) {
                throw new Error("Expected the field `playArea` to be an array in the JSON data but got " + data['playArea']);
            }
            // validate the optional field `playArea` (array)
            for (const item of data['playArea']) {
                Card.validateJsonObject(item);
            };
        }
        if (data['drawPile']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['drawPile'])) {
                throw new Error("Expected the field `drawPile` to be an array in the JSON data but got " + data['drawPile']);
            }
            // validate the optional field `drawPile` (array)
            for (const item of data['drawPile']) {
                Card.validateJsonObject(item);
            };
        }
        if (data['discardPile']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['discardPile'])) {
                throw new Error("Expected the field `discardPile` to be an array in the JSON data but got " + data['discardPile']);
            }
            // validate the optional field `discardPile` (array)
            for (const item of data['discardPile']) {
                Card.validateJsonObject(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['banks'])) {
            throw new Error("Expected the field `banks` to be an array in the JSON data but got " + data['banks']);
        }
        // ensure the json data is a string
        if (data['randomSeed'] && !(typeof data['randomSeed'] === 'string' || data['randomSeed'] instanceof String)) {
            throw new Error("Expected the field `randomSeed` to be a primitive type in the JSON string but got " + data['randomSeed']);
        }

        return true;
    }


}



/**
 * List of players. Omit to request a 'practice' match.
 * @member {Array.<String>} playerids
 */
MatchCreationParams.prototype['playerids'] = undefined;

/**
 * Tags to add to match for later filtering
 * @member {Array.<String>} tags
 */
MatchCreationParams.prototype['tags'] = undefined;

/**
 * [Debug purposes] Play Area initial contents of cards.
 * @member {Array.<module:model/Card>} playArea
 */
MatchCreationParams.prototype['playArea'] = undefined;

/**
 * [Debug purposes] Draw pile initial contents of cards. When omitted default will be generated.
 * @member {Array.<module:model/Card>} drawPile
 */
MatchCreationParams.prototype['drawPile'] = undefined;

/**
 * [Debug purposes] Discard pile initial contents of cards. When omitted default will be generated.
 * @member {Array.<module:model/Card>} discardPile
 */
MatchCreationParams.prototype['discardPile'] = undefined;

/**
 * [Debug purposes] Banks initial contents of cards. When omitted match will start with empty banks.
 * @member {Array.<Array.<module:model/Card>>} banks
 */
MatchCreationParams.prototype['banks'] = undefined;

/**
 * [Debug purposes] Optional seed value for pseudorandom generator used for randomization of starting player, card drawing.  Match creation returns a the input or generated seed so you can recreate any game during development.  To ignore randomization and pick first item always use \"norandom\".
 * @member {String} randomSeed
 */
MatchCreationParams.prototype['randomSeed'] = undefined;

/**
 * @member {Number} timeout
 */
MatchCreationParams.prototype['timeout'] = undefined;






export default MatchCreationParams;

