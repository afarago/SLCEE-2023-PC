/**
 * SLCEE-2023-PC Arena
 * **SAP Labs CEE Hub Programming Competition 2023 Arena server**.  You can find more information about the game and the competititon rules at [github/SLCEE-2023-PC-public](https://github.com/afarago/SLCEE-2023-PC-public).   For a test run, you can use the crash test dummy user `000000000000000000000000/dummypass`.   *Note: All the APIs expect and return application/json*.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: DL SLCEE 2023 PC <DL_637A3F6466D808029A65636A@global.corp.sap>
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Card from './Card';
import CardEffect from './CardEffect';

/**
 * The State model module.
 * @module model/State
 * @version 1.0.0
 */
class State {
    /**
     * Constructs a new <code>State</code>.
     * Match state associated with an atomic event
     * @alias module:model/State
     * @param banks {Array.<Object.<String, Array.<Object>>>} 
     * @param playArea {Array.<module:model/Card>} Play area - object to represent the play area
     * @param currentPlayerIndex {Number} 
     */
    constructor(banks, playArea, currentPlayerIndex) { 
        
        State.initialize(this, banks, playArea, currentPlayerIndex);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, banks, playArea, currentPlayerIndex) { 
        obj['banks'] = banks;
        obj['playArea'] = playArea;
        obj['currentPlayerIndex'] = currentPlayerIndex;
    }

    /**
     * Constructs a <code>State</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/State} obj Optional instance to populate.
     * @return {module:model/State} The populated <code>State</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new State();

            if (data.hasOwnProperty('banks')) {
                obj['banks'] = ApiClient.convertToType(data['banks'], [Object]);
            }
            if (data.hasOwnProperty('drawPile')) {
                obj['drawPile'] = ApiClient.convertToType(data['drawPile'], [Card]);
            }
            if (data.hasOwnProperty('discardPile')) {
                obj['discardPile'] = ApiClient.convertToType(data['discardPile'], [Card]);
            }
            if (data.hasOwnProperty('playArea')) {
                obj['playArea'] = ApiClient.convertToType(data['playArea'], [Card]);
            }
            if (data.hasOwnProperty('currentPlayerIndex')) {
                obj['currentPlayerIndex'] = ApiClient.convertToType(data['currentPlayerIndex'], 'Number');
            }
            if (data.hasOwnProperty('pendingEffect')) {
                obj['pendingEffect'] = CardEffect.constructFromObject(data['pendingEffect']);
            }
            if (data.hasOwnProperty('winnerIdx')) {
                obj['winnerIdx'] = ApiClient.convertToType(data['winnerIdx'], 'Number');
            }
            if (data.hasOwnProperty('timeoutCount')) {
                obj['timeoutCount'] = ApiClient.convertToType(data['timeoutCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>State</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>State</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of State.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['banks'])) {
            throw new Error("Expected the field `banks` to be an array in the JSON data but got " + data['banks']);
        }
        if (data['drawPile']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['drawPile'])) {
                throw new Error("Expected the field `drawPile` to be an array in the JSON data but got " + data['drawPile']);
            }
            // validate the optional field `drawPile` (array)
            for (const item of data['drawPile']) {
                Card.validateJsonObject(item);
            };
        }
        if (data['discardPile']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['discardPile'])) {
                throw new Error("Expected the field `discardPile` to be an array in the JSON data but got " + data['discardPile']);
            }
            // validate the optional field `discardPile` (array)
            for (const item of data['discardPile']) {
                Card.validateJsonObject(item);
            };
        }
        if (data['playArea']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['playArea'])) {
                throw new Error("Expected the field `playArea` to be an array in the JSON data but got " + data['playArea']);
            }
            // validate the optional field `playArea` (array)
            for (const item of data['playArea']) {
                Card.validateJsonObject(item);
            };
        }
        // validate the optional field `currentPlayerIndex`
        if (data['currentPlayerIndex']) { // data not null
          Number.validateJSON(data['currentPlayerIndex']);
        }
        // validate the optional field `pendingEffect`
        if (data['pendingEffect']) { // data not null
          CardEffect.validateJSON(data['pendingEffect']);
        }
        // validate the optional field `winnerIdx`
        if (data['winnerIdx']) { // data not null
          Number.validateJSON(data['winnerIdx']);
        }

        return true;
    }


}

State.RequiredProperties = ["banks", "playArea", "currentPlayerIndex"];

/**
 * @member {Array.<Object.<String, Array.<Object>>>} banks
 */
State.prototype['banks'] = undefined;

/**
 * Draw card pile - contains all remining cards
 * @member {Array.<module:model/Card>} drawPile
 */
State.prototype['drawPile'] = undefined;

/**
 * Discard pile - object to represent discard pile
 * @member {Array.<module:model/Card>} discardPile
 */
State.prototype['discardPile'] = undefined;

/**
 * Play area - object to represent the play area
 * @member {Array.<module:model/Card>} playArea
 */
State.prototype['playArea'] = undefined;

/**
 * @member {Number} currentPlayerIndex
 */
State.prototype['currentPlayerIndex'] = undefined;

/**
 * @member {module:model/CardEffect} pendingEffect
 */
State.prototype['pendingEffect'] = undefined;

/**
 * @member {Number} winnerIdx
 */
State.prototype['winnerIdx'] = undefined;

/**
 * @member {Number} timeoutCount
 */
State.prototype['timeoutCount'] = undefined;






export default State;

