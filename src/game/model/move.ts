import "core-js/es/array/at";
import {
  attribute,
  hashKey,
  autoGeneratedHashKey,
  rangeKey,
  table,
} from "@aws/dynamodb-data-mapper-annotations";
import { embed } from "@aws/dynamodb-data-mapper";

import MatchState from "./matchstate";
import { MatchEvent } from "./matchevent";
import Match, { MatchId } from "./match";

export type MoveId = string;

/**
 * Move object - encapsulating multiple events
 */
@table("Moves")
export default class Move {
  @autoGeneratedHashKey()
  id!: MoveId;

  @rangeKey({ type: "String" })
  matchId!: MatchId; //-- parent matchid

  @attribute()
  sequenceId: number;

  // @attribute({
  //   marshall: utils.dateMarshall,
  //   unmarshall: utils.dateUnmarshall,
  //   defaultProvider: () => new Date().toISOString(),
  // })
  @attribute({
    type: "Date",
    defaultProvider: () => new Date(),
  })
  at!: Date;

  @attribute({ memberType: embed(MatchEvent), valueConstructor: MatchEvent })
  //@attribute({ memberType: embed(MatchEvent) })
  events: Array<MatchEvent> = [];

  //-- do not persist, this is the initial state for handling events
  //-- when new move is created, before first event is added
  initialState: MatchState;

  constructor(matchId?: MatchId, initialState?: MatchState) {
    this.matchId = matchId;
    this.initialState = initialState;
  }

  get state(): MatchState {
    return this.lastEvent?.state ?? this.initialState;
  }
  get lastEvent(): MatchEvent {
    return this.events?.at(-1);
  }
  get currentPlayerIndex(): number {
    return this.state?.currentPlayerIndex;
  }
  getEvents(): Array<MatchEvent> {
    return this.events;
  }
  addEvent(event: MatchEvent): void {
    this.events?.push(event);
  }
}
