import "core-js/es/array/at";
/* tslint:disable:max-classes-per-file */
import {
  attribute,
  hashKey,
  autoGeneratedHashKey,
  rangeKey,
  table,
} from "@aws/dynamodb-data-mapper-annotations";
import { embed } from "@aws/dynamodb-data-mapper";

export const OCardSuit = {
  Anchor: "Anchor",
  Hook: "Hook",
  Cannon: "Cannon",
  Key: "Key",
  Chest: "Chest",
  Map: "Map",
  Oracle: "Oracle",
  Sword: "Sword",
  Kraken: "Kraken",
  Mermaid: "Mermaid",
}; // as const;
export type CardSuit = keyof typeof OCardSuit;
// export type Suit = typeof OSuit[keyof typeof OSuit];
// export type Suit =
//   | "Anchor"
//   | "Hook"
//   | "Cannon"
//   | "Key"
//   | "Chest"
//   | "Map"
//   | "Oracle"
//   | "Sword"
//   | "Kraken"
//   | "Mermaid";

/**
 * Card abbreviation
 */
//export type CardValueBase = 2 | 3 | 4 | 5 | 6 | 7;
//export type CardValue = CardValueBase | 8 | 9;
export type CardAbbreviation = [CardSuit, number]; //CardValue];

/**
 * Card object
 */
export class Card {
  //TODO: change to tuple
  @attribute()
  suit: CardSuit;

  @attribute({ unwrapNumbers: true }) //{ memberType: "Number" }
  value: number; //CardValue;

  constructor(suit?: CardSuit, value?: number) {
    //CardValue) {
    this.suit = suit;
    this.value = value;
    if (
      suit !== undefined &&
      value !== undefined &&
      !(suit !== OCardSuit.Mermaid && value >= 2 && value <= 7) &&
      !(suit === OCardSuit.Mermaid && value >= 4 && value <= 9)
    )
      throw new Error("Invalid Card");
  }
  static fromAbbreviation(abbreviation: CardAbbreviation) {
    return new Card(abbreviation[0], abbreviation[1]);
  }
}

/**
 * Card pile object
 */
export class CardPile {
  @attribute({ memberType: embed(Card) })
  readonly cards: Array<Card>;
  //-- architecture warning - should not derive from Array<Card> directly as lodash Lodash only clones index values (and some meta values) of arrays.

  constructor() {
    this.cards = new Array<Card>();
  }
  get length(): number {
    return this.cards.length;
  }
  set length(value: number) {
    this.cards.length = value;
  }
}
/**
 * Card suit stack - for effective representation of bank collection ordered by suits
 */
export class CardSuitStack {
  @attribute({ memberType: "Number" }) // here it should be "Number", as embed(Number) fails - AWS bug
  stack: Set<number>; //CardValue

  constructor() {
    this.stack = new Set<number>(); //CardValue>();
  }

  max() {
    return Math.max.apply(null, Array.from(this.stack.values()));
  }
}
/**
 * Ordered card pile - for effective representation of bank collection ordered by suits
 */
export class OrderedCardPile {
  constructor() {
    this.piles = new Map<CardSuit, CardSuitStack>();
  }

  @attribute({ memberType: embed(CardSuitStack) })
  piles: Map<CardSuit, CardSuitStack>;

  get flatSize(): number {
    let count = 0;
    for (let [key, value] of this.piles.entries()) count += value.stack.size;
    return count;
  }
}

/**
 * Bank - object for a player's bank
 */
export class Bank extends OrderedCardPile {}

/**
 * Play area - object to represent the play area
 */
export class PlayArea extends CardPile {} // or Map<Suit, number>;

export { default as DrawCardPile } from "./drawcardpile";
export { default as MatchState } from "./matchstate";
export { default as Match, MatchId } from "./match";
export { default as Move, MoveId } from "./move";
export { default as Player, PlayerId } from "./player";
export * from "./matchevent";
export * from "./cardeffect";
export * from "./utils";
