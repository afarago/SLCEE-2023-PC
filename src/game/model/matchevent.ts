/* tslint:disable:max-classes-per-file */
import "core-js/es/array/at";
import {
  attribute,
  hashKey,
  autoGeneratedHashKey,
  rangeKey,
  table,
} from "@aws/dynamodb-data-mapper-annotations";
import { embed } from "@aws/dynamodb-data-mapper";

import MatchState from "./matchstate";
import Player, { PlayerId } from "./player";
import { Card } from "./model";
import { CardEffect } from "./cardeffect";

export const OMatchEventType = {
  MatchStarted: "MatchStarted",
  TurnStarted: "TurnStarted",
  Draw: "Draw",
  CardPlayedEffect: "CardPlayedEffect",
  ResponseToEffect: "ResponseToEffect",
  CardPlacedToPlayArea: "CardPlacedToPlayArea",
  CardRemovedFromBank: "CardRemovedFromBank",
  EndTurn: "EndTurn",
  TurnEnded: "TurnEnded",
  MatchEnded: "MatchEnded",
  // QueryDrawPile: 10,
  // QueryDiscardPile: 11,
  // QueryMatchStatus: 12,
} as const;
type MatchEventType = keyof typeof OMatchEventType;

export type MatchEventParemeters = {
  turnStartedPlayer?: PlayerId;
  drawCard?: Card;
  cardPlayedEffect?: CardEffect;
  cardPlacedToPlayAreaCard?: Card;
  cardRemovedFromBankCard?: Card;
  cardRemovedFromBankIndex?: number;
  turnEndedCardsCollected?: Array<Card>;
  turnEndedIsSuccessful?: boolean;
  matchEndedScores?: Array<number>;
  matchEndedWinner?: PlayerId;
  responseToEffectType?: string;
  responseToEffectCard?: Card; //LATER: e.g.cannon/sword - in case of multiplayer player is not (directly) covered -- card determines though
};

export class MatchEvent {
  @attribute()
  eventType: MatchEventType;

  @attribute(embed(MatchState))
  state: MatchState;

  constructor(eventType?: MatchEventType, params?: MatchEventParemeters) {
    this.eventType = eventType;
    Object.assign(this, params);
  }

  get currentPlayerIndex(): number {
    return this.state.currentPlayerIndex;
  }

  //TODO: use MatchEventParemeters
  @attribute()
  readonly turnStartedPlayer: PlayerId;
  @attribute()
  readonly drawCard: Card;
  @attribute()
  readonly cardPlayedEffect: CardEffect;
  @attribute()
  readonly cardPlacedToPlayAreaCard: Card;
  @attribute()
  readonly cardRemovedFromBankCard: Card;
  @attribute()
  readonly cardRemovedFromBankIndex: number;
  @attribute({ memberType: embed(Card) })
  readonly turnEndedCardsCollected: Array<Card>;
  @attribute()
  readonly turnEndedIsSuccessful: boolean;
  @attribute({ memberType: embed(Number) }) // here it should be embed(Number) as "Number" fails - AWS bug
  readonly matchEndedScores: Array<number>;
  @attribute()
  readonly matchEndedWinner: PlayerId;
  @attribute()
  readonly responseToEffectType: string;
  @attribute()
  readonly responseToEffectCard: Card; //LATER: e.g.cannon/sword - in case of multiplayer player is not (directly) covered -- card determines though
}
