//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace ConsoleApp1
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface ISLCEE2023PCArenaClient
    {
        /// <summary>
        /// Hello world ping message
        /// </summary>
        /// <remarks>
        /// Hello world ping message
        /// </remarks>
        /// <returns>message</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HelloWorldResponse> GetMessageAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hello world ping message
        /// </summary>
        /// <remarks>
        /// Hello world ping message
        /// </remarks>
        /// <returns>message</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HelloWorldResponse> GetMessageAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves all Matches
        /// </summary>
        /// <remarks>
        /// Retrieves the details of all Matches.
        /// <br/>Players will receive own matches only
        /// </remarks>
        /// <param name="at">optional filter parameter in the form of ISO date or 'today'</param>
        /// <param name="active">optional filter matches where player is active at</param>
        /// <param name="tags">optional filter for tag - comma separated list of values combined with or logic</param>
        /// <param name="wait">optionally waits with timeout for any resulting match - useful for polling when the user receives invite for a new match to avoid polling</param>
        /// <param name="condensed">optional condensed view</param>
        /// <param name="limit">optional set max number of results returned</param>
        /// <param name="offset">optional match id offset used for limiting</param>
        /// <param name="sortasc">optional sorting order, default is descending - latest match first</param>
        /// <param name="id">optional filter for list of match ids - comma separated list of values combined with or logic</param>
        /// <returns>matches</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> GetMatchesAsync(string at, BoolLikeString? active, string tags, BoolLikeString? wait, BoolLikeString? condensed, int? limit, string offset, BoolLikeString? sortasc, string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves all Matches
        /// </summary>
        /// <remarks>
        /// Retrieves the details of all Matches.
        /// <br/>Players will receive own matches only
        /// </remarks>
        /// <param name="at">optional filter parameter in the form of ISO date or 'today'</param>
        /// <param name="active">optional filter matches where player is active at</param>
        /// <param name="tags">optional filter for tag - comma separated list of values combined with or logic</param>
        /// <param name="wait">optionally waits with timeout for any resulting match - useful for polling when the user receives invite for a new match to avoid polling</param>
        /// <param name="condensed">optional condensed view</param>
        /// <param name="limit">optional set max number of results returned</param>
        /// <param name="offset">optional match id offset used for limiting</param>
        /// <param name="sortasc">optional sorting order, default is descending - latest match first</param>
        /// <param name="id">optional filter for list of match ids - comma separated list of values combined with or logic</param>
        /// <returns>matches</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> GetMatchesAsync(string at, BoolLikeString? active, string tags, BoolLikeString? wait, BoolLikeString? condensed, int? limit, string offset, BoolLikeString? sortasc, string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Match
        /// </summary>
        /// <remarks>
        /// Creates a new Match using the supplied parameters, leave empty for a default 'practice' Match.
        /// </remarks>
        /// <param name="body">Match creation parameters including players, drawpile, discardpile, banks and randomseed</param>
        /// <returns>The newly created Match id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchCreateResponse> CreateMatchAsync(MatchCreationParams body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Match
        /// </summary>
        /// <remarks>
        /// Creates a new Match using the supplied parameters, leave empty for a default 'practice' Match.
        /// </remarks>
        /// <param name="body">Match creation parameters including players, drawpile, discardpile, banks and randomseed</param>
        /// <returns>The newly created Match id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchCreateResponse> CreateMatchAsync(MatchCreationParams body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a Match details
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing match.
        /// <br/>Supply the unique match ID and receive corresponding match details.
        /// </remarks>
        /// <param name="id">The requested Match Id</param>
        /// <param name="waitactive">optionally waits with timeout until user becomes active</param>
        /// <param name="showevents">optionally add events associated with the match</param>
        /// <returns>Match details, with al details when requesting a 'practice' Match</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> GetMatchAsync(string id, BoolLikeString? waitactive, BoolLikeString? showevents, BoolLikeString? showdebug, BoolLikeString? condensed);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a Match details
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing match.
        /// <br/>Supply the unique match ID and receive corresponding match details.
        /// </remarks>
        /// <param name="id">The requested Match Id</param>
        /// <param name="waitactive">optionally waits with timeout until user becomes active</param>
        /// <param name="showevents">optionally add events associated with the match</param>
        /// <returns>Match details, with al details when requesting a 'practice' Match</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> GetMatchAsync(string id, BoolLikeString? waitactive, BoolLikeString? showevents, BoolLikeString? showdebug, BoolLikeString? condensed, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Execute an Action for a Match
        /// </summary>
        /// <remarks>
        /// Execute an Action for an existing Match.
        /// <br/>Supply the unique match ID and add Action details
        /// </remarks>
        /// <param name="wait">optionally waits with timeout executing the action - useful for waiting for other user to finish its action to avoid polling</param>
        /// <param name="body">Match action execution parameters</param>
        /// <returns>List of Response events executed in response for the Action</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchEventDTO>> ExecuteActionForMatchAsync(string id, BoolLikeString? wait, IUserAction body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Execute an Action for a Match
        /// </summary>
        /// <remarks>
        /// Execute an Action for an existing Match.
        /// <br/>Supply the unique match ID and add Action details
        /// </remarks>
        /// <param name="wait">optionally waits with timeout executing the action - useful for waiting for other user to finish its action to avoid polling</param>
        /// <param name="body">Match action execution parameters</param>
        /// <returns>List of Response events executed in response for the Action</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchEventDTO>> ExecuteActionForMatchAsync(string id, BoolLikeString? wait, IUserAction body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Forceful central deletion of a Match
        /// </summary>
        /// <remarks>
        /// Forceful central deletion of a Match
        /// </remarks>
        /// <param name="id">game id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> DeleteMatchAsync(string id, Body body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forceful central deletion of a Match
        /// </summary>
        /// <remarks>
        /// Forceful central deletion of a Match
        /// </remarks>
        /// <param name="id">game id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchDTO> DeleteMatchAsync(string id, Body body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Forceful central deletion of a match using a watchdog on timeout
        /// </summary>
        /// <remarks>
        /// Forceful central deletion of a match using a watchdog on timeout
        /// </remarks>
        /// <param name="tags">optional filter matches with matching tag/comma separated list of tags</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchDTO>> WatchDogMatchesAsync(string tags);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forceful central deletion of a match using a watchdog on timeout
        /// </summary>
        /// <remarks>
        /// Forceful central deletion of a match using a watchdog on timeout
        /// </remarks>
        /// <param name="tags">optional filter matches with matching tag/comma separated list of tags</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchDTO>> WatchDogMatchesAsync(string tags, System.Threading.CancellationToken cancellationToken);

        /// <remarks>
        /// Return the Busy days for any match exists
        /// </remarks>
        /// <returns>match statistics busy days</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetMatchStatisticsBusyDaysAsync(string at);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Return the Busy days for any match exists
        /// </remarks>
        /// <returns>match statistics busy days</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetMatchStatisticsBusyDaysAsync(string at, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves player information
        /// </summary>
        /// <remarks>
        /// Retrieves the details of all Players.
        /// <br/>Players can retrieve only own information and details
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlayerDTO>> GetPlayersAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves player information
        /// </summary>
        /// <remarks>
        /// Retrieves the details of all Players.
        /// <br/>Players can retrieve only own information and details
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlayerDTO>> GetPlayersAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves player details
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing Player.
        /// <br/>Supply the unique Player ID and receive corresponding Player details.
        /// <br/>Players can retrieve only own information and details
        /// </remarks>
        /// <param name="id">The requested Player Id</param>
        /// <returns>Player details</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerDTO> GetPlayerAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves player details
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing Player.
        /// <br/>Supply the unique Player ID and receive corresponding Player details.
        /// <br/>Players can retrieve only own information and details
        /// </remarks>
        /// <param name="id">The requested Player Id</param>
        /// <returns>Player details</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlayerDTO> GetPlayerAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns session information
        /// </summary>
        /// <remarks>
        /// Returns generic information on session
        /// </remarks>
        /// <returns>The user, database, ip information.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SessionData> GetSessionInfoAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns session information
        /// </summary>
        /// <remarks>
        /// Returns generic information on session
        /// </remarks>
        /// <returns>The user, database, ip information.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SessionData> GetSessionInfoAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns authenticated User
        /// </summary>
        /// <remarks>
        /// Returns information on authenticated User
        /// </remarks>
        /// <returns>The id of the authenticated User.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SessionUserData> GetAuthenticatedUserAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authenticated User
        /// </summary>
        /// <remarks>
        /// Returns information on authenticated User
        /// </remarks>
        /// <returns>The id of the authenticated User.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SessionUserData> GetAuthenticatedUserAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SLCEE2023PCArenaClient : ISLCEE2023PCArenaClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SLCEE2023PCArenaClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Hello world ping message
        /// </summary>
        /// <remarks>
        /// Hello world ping message
        /// </remarks>
        /// <returns>message</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HelloWorldResponse> GetMessageAsync()
        {
            return GetMessageAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hello world ping message
        /// </summary>
        /// <remarks>
        /// Hello world ping message
        /// </remarks>
        /// <returns>message</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HelloWorldResponse> GetMessageAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/hello");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HelloWorldResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieves all Matches
        /// </summary>
        /// <remarks>
        /// Retrieves the details of all Matches.
        /// <br/>Players will receive own matches only
        /// </remarks>
        /// <param name="at">optional filter parameter in the form of ISO date or 'today'</param>
        /// <param name="active">optional filter matches where player is active at</param>
        /// <param name="tags">optional filter for tag - comma separated list of values combined with or logic</param>
        /// <param name="wait">optionally waits with timeout for any resulting match - useful for polling when the user receives invite for a new match to avoid polling</param>
        /// <param name="condensed">optional condensed view</param>
        /// <param name="limit">optional set max number of results returned</param>
        /// <param name="offset">optional match id offset used for limiting</param>
        /// <param name="sortasc">optional sorting order, default is descending - latest match first</param>
        /// <param name="id">optional filter for list of match ids - comma separated list of values combined with or logic</param>
        /// <returns>matches</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> GetMatchesAsync(string at, BoolLikeString? active, string tags, BoolLikeString? wait, BoolLikeString? condensed, int? limit, string offset, BoolLikeString? sortasc, string id)
        {
            return GetMatchesAsync(at, active, tags, wait, condensed, limit, offset, sortasc, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves all Matches
        /// </summary>
        /// <remarks>
        /// Retrieves the details of all Matches.
        /// <br/>Players will receive own matches only
        /// </remarks>
        /// <param name="at">optional filter parameter in the form of ISO date or 'today'</param>
        /// <param name="active">optional filter matches where player is active at</param>
        /// <param name="tags">optional filter for tag - comma separated list of values combined with or logic</param>
        /// <param name="wait">optionally waits with timeout for any resulting match - useful for polling when the user receives invite for a new match to avoid polling</param>
        /// <param name="condensed">optional condensed view</param>
        /// <param name="limit">optional set max number of results returned</param>
        /// <param name="offset">optional match id offset used for limiting</param>
        /// <param name="sortasc">optional sorting order, default is descending - latest match first</param>
        /// <param name="id">optional filter for list of match ids - comma separated list of values combined with or logic</param>
        /// <returns>matches</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> GetMatchesAsync(string at, BoolLikeString? active, string tags, BoolLikeString? wait, BoolLikeString? condensed, int? limit, string offset, BoolLikeString? sortasc, string id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/matches?");
            if (at != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("at") + "=").Append(System.Uri.EscapeDataString(ConvertToString(at, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (active != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("active") + "=").Append(System.Uri.EscapeDataString(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tags != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (wait != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("wait") + "=").Append(System.Uri.EscapeDataString(ConvertToString(wait, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condensed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condensed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condensed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortasc != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortasc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortasc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new Match
        /// </summary>
        /// <remarks>
        /// Creates a new Match using the supplied parameters, leave empty for a default 'practice' Match.
        /// </remarks>
        /// <param name="body">Match creation parameters including players, drawpile, discardpile, banks and randomseed</param>
        /// <returns>The newly created Match id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MatchCreateResponse> CreateMatchAsync(MatchCreationParams body)
        {
            return CreateMatchAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Match
        /// </summary>
        /// <remarks>
        /// Creates a new Match using the supplied parameters, leave empty for a default 'practice' Match.
        /// </remarks>
        /// <param name="body">Match creation parameters including players, drawpile, discardpile, banks and randomseed</param>
        /// <returns>The newly created Match id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MatchCreateResponse> CreateMatchAsync(MatchCreationParams body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/matches");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MatchCreateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Start a match with your player id twice or your player and the dummy player to start a practice match.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Internal Server Error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieves a Match details
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing match.
        /// <br/>Supply the unique match ID and receive corresponding match details.
        /// </remarks>
        /// <param name="id">The requested Match Id</param>
        /// <param name="waitactive">optionally waits with timeout until user becomes active</param>
        /// <param name="showevents">optionally add events associated with the match</param>
        /// <returns>Match details, with al details when requesting a 'practice' Match</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> GetMatchAsync(string id, BoolLikeString? waitactive, BoolLikeString? showevents, BoolLikeString? showdebug, BoolLikeString? condensed)
        {
            return GetMatchAsync(id, waitactive, showevents, showdebug, condensed, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a Match details
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing match.
        /// <br/>Supply the unique match ID and receive corresponding match details.
        /// </remarks>
        /// <param name="id">The requested Match Id</param>
        /// <param name="waitactive">optionally waits with timeout until user becomes active</param>
        /// <param name="showevents">optionally add events associated with the match</param>
        /// <returns>Match details, with al details when requesting a 'practice' Match</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> GetMatchAsync(string id, BoolLikeString? waitactive, BoolLikeString? showevents, BoolLikeString? showdebug, BoolLikeString? condensed, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/matches/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (waitactive != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("waitactive") + "=").Append(System.Uri.EscapeDataString(ConvertToString(waitactive, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showevents != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showevents") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showevents, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showdebug != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showdebug") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showdebug, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (condensed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("condensed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condensed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Match is visible to participating players only.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Match does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Authenticated user is not the current player.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MatchDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<MatchDTO>("No action possible on finished matches.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Internal Server Error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Execute an Action for a Match
        /// </summary>
        /// <remarks>
        /// Execute an Action for an existing Match.
        /// <br/>Supply the unique match ID and add Action details
        /// </remarks>
        /// <param name="wait">optionally waits with timeout executing the action - useful for waiting for other user to finish its action to avoid polling</param>
        /// <param name="body">Match action execution parameters</param>
        /// <returns>List of Response events executed in response for the Action</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchEventDTO>> ExecuteActionForMatchAsync(string id, BoolLikeString? wait, IUserAction body)
        {
            return ExecuteActionForMatchAsync(id, wait, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Execute an Action for a Match
        /// </summary>
        /// <remarks>
        /// Execute an Action for an existing Match.
        /// <br/>Supply the unique match ID and add Action details
        /// </remarks>
        /// <param name="wait">optionally waits with timeout executing the action - useful for waiting for other user to finish its action to avoid polling</param>
        /// <param name="body">Match action execution parameters</param>
        /// <returns>List of Response events executed in response for the Action</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchEventDTO>> ExecuteActionForMatchAsync(string id, BoolLikeString? wait, IUserAction body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/matches/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (wait != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("wait") + "=").Append(System.Uri.EscapeDataString(ConvertToString(wait, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MatchEventDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Invalid useraction input parameter.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Match is visible only to participating players.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Match does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Authenticated user is not the current player.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MatchEventDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<MatchEventDTO>>("No action possible on finished matches.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Internal Server Error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Forceful central deletion of a Match
        /// </summary>
        /// <remarks>
        /// Forceful central deletion of a Match
        /// </remarks>
        /// <param name="id">game id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MatchDTO> DeleteMatchAsync(string id, Body body)
        {
            return DeleteMatchAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forceful central deletion of a Match
        /// </summary>
        /// <remarks>
        /// Forceful central deletion of a Match
        /// </remarks>
        /// <param name="id">game id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MatchDTO> DeleteMatchAsync(string id, Body body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/matches/{id}/terminate");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MatchDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not authorized to perform action.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Match does not exist.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Forceful central deletion of a match using a watchdog on timeout
        /// </summary>
        /// <remarks>
        /// Forceful central deletion of a match using a watchdog on timeout
        /// </remarks>
        /// <param name="tags">optional filter matches with matching tag/comma separated list of tags</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchDTO>> WatchDogMatchesAsync(string tags)
        {
            return WatchDogMatchesAsync(tags, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forceful central deletion of a match using a watchdog on timeout
        /// </summary>
        /// <remarks>
        /// Forceful central deletion of a match using a watchdog on timeout
        /// </remarks>
        /// <param name="tags">optional filter matches with matching tag/comma separated list of tags</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MatchDTO>> WatchDogMatchesAsync(string tags, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/matches/watchdog?");
            if (tags != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MatchDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not authorized to perform action.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Return the Busy days for any match exists
        /// </remarks>
        /// <returns>match statistics busy days</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetMatchStatisticsBusyDaysAsync(string at)
        {
            return GetMatchStatisticsBusyDaysAsync(at, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Return the Busy days for any match exists
        /// </remarks>
        /// <returns>match statistics busy days</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetMatchStatisticsBusyDaysAsync(string at, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/matches/busydays?");
            if (at != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("at") + "=").Append(System.Uri.EscapeDataString(ConvertToString(at, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not authorized to perform action.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieves player information
        /// </summary>
        /// <remarks>
        /// Retrieves the details of all Players.
        /// <br/>Players can retrieve only own information and details
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlayerDTO>> GetPlayersAsync()
        {
            return GetPlayersAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves player information
        /// </summary>
        /// <remarks>
        /// Retrieves the details of all Players.
        /// <br/>Players can retrieve only own information and details
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlayerDTO>> GetPlayersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/players");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PlayerDTO>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not allowed for users to query players.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieves player details
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing Player.
        /// <br/>Supply the unique Player ID and receive corresponding Player details.
        /// <br/>Players can retrieve only own information and details
        /// </remarks>
        /// <param name="id">The requested Player Id</param>
        /// <returns>Player details</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PlayerDTO> GetPlayerAsync(string id)
        {
            return GetPlayerAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves player details
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing Player.
        /// <br/>Supply the unique Player ID and receive corresponding Player details.
        /// <br/>Players can retrieve only own information and details
        /// </remarks>
        /// <param name="id">The requested Player Id</param>
        /// <returns>Player details</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlayerDTO> GetPlayerAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/players/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlayerDTO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not allowed to query other users.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Player record not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns session information
        /// </summary>
        /// <remarks>
        /// Returns generic information on session
        /// </remarks>
        /// <returns>The user, database, ip information.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SessionData> GetSessionInfoAsync()
        {
            return GetSessionInfoAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns session information
        /// </summary>
        /// <remarks>
        /// Returns generic information on session
        /// </remarks>
        /// <returns>The user, database, ip information.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SessionData> GetSessionInfoAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/sessioninfo");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SessionData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns authenticated User
        /// </summary>
        /// <remarks>
        /// Returns information on authenticated User
        /// </remarks>
        /// <returns>The id of the authenticated User.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SessionUserData> GetAuthenticatedUserAsync()
        {
            return GetAuthenticatedUserAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns authenticated User
        /// </summary>
        /// <remarks>
        /// Returns information on authenticated User
        /// </remarks>
        /// <returns>The id of the authenticated User.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SessionUserData> GetAuthenticatedUserAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/whoami");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SessionUserData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HelloWorldResponse
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HelloWorldResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HelloWorldResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum MatchEventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MatchStarted")]
        MatchStarted = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TurnStarted")]
        TurnStarted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Draw")]
        Draw = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CardPlayedEffect")]
        CardPlayedEffect = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ResponseToEffect")]
        ResponseToEffect = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CardPlacedToPlayArea")]
        CardPlacedToPlayArea = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CardRemovedFromBank")]
        CardRemovedFromBank = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TurnEnded")]
        TurnEnded = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MatchEnded")]
        MatchEnded = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Comment")]
        Comment = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CardSuit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Anchor")]
        Anchor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Hook")]
        Hook = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cannon")]
        Cannon = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Key")]
        Key = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Chest")]
        Chest = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Map")]
        Map = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Oracle")]
        Oracle = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Sword")]
        Sword = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Kraken")]
        Kraken = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Mermaid")]
        Mermaid = 9,

    }

    /// <summary>
    /// Card Value including all possible values
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CardValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"2")]
        _2 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"3")]
        _3 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4")]
        _4 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"5")]
        _5 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"7")]
        _7 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"8")]
        _8 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"9")]
        _9 = 7,

    }

    /// <summary>
    /// Card interface representing a game card
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Card
    {
        [Newtonsoft.Json.JsonProperty("suit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardSuit Suit { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Card FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Card>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CardEffectType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Oracle")]
        Oracle = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Hook")]
        Hook = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cannon")]
        Cannon = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Sword")]
        Sword = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Map")]
        Map = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Kraken")]
        Kraken = 5,

    }

    /// <summary>
    /// Card effect associated with a special card
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CardEffect
    {
        [Newtonsoft.Json.JsonProperty("effectType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardEffectType EffectType { get; set; }

        [Newtonsoft.Json.JsonProperty("cards", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Card> Cards { get; set; }

        [Newtonsoft.Json.JsonProperty("krakenCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double KrakenCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CardEffect FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CardEffect>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IStateDeltaStack
    {
        [Newtonsoft.Json.JsonProperty("added", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Card> Added { get; set; }

        [Newtonsoft.Json.JsonProperty("removed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Card> Removed { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IStateDeltaStack FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IStateDeltaStack>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IStateDelta
    {
        [Newtonsoft.Json.JsonProperty("drawPile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IStateDeltaStack DrawPile { get; set; }

        [Newtonsoft.Json.JsonProperty("discardPile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IStateDeltaStack DiscardPile { get; set; }

        [Newtonsoft.Json.JsonProperty("banks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IStateDeltaStack> Banks { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IStateDelta FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IStateDelta>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Match Response Event DTO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MatchEventDTO
    {
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MatchEventType EventType { get; set; }

        [Newtonsoft.Json.JsonProperty("matchStartedSeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MatchStartedSeed { get; set; }

        [Newtonsoft.Json.JsonProperty("drawCard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Card DrawCard { get; set; }

        [Newtonsoft.Json.JsonProperty("cardPlayedEffect", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CardEffect CardPlayedEffect { get; set; }

        [Newtonsoft.Json.JsonProperty("cardPlacedToPlayAreaCard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Card CardPlacedToPlayAreaCard { get; set; }

        [Newtonsoft.Json.JsonProperty("cardRemovedFromBankCard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Card CardRemovedFromBankCard { get; set; }

        [Newtonsoft.Json.JsonProperty("cardRemovedFromBankIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CardRemovedFromBankIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("turnEndedIsSuccessful", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool TurnEndedIsSuccessful { get; set; }

        [Newtonsoft.Json.JsonProperty("turnEndedBonusCards", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Card> TurnEndedBonusCards { get; set; }

        [Newtonsoft.Json.JsonProperty("turnEndedDelta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IStateDelta TurnEndedDelta { get; set; }

        [Newtonsoft.Json.JsonProperty("matchEndedScores", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> MatchEndedScores { get; set; }

        [Newtonsoft.Json.JsonProperty("matchEndedWinnerIdx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MatchEndedWinnerIdx { get; set; }

        [Newtonsoft.Json.JsonProperty("matchEndedTerminated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MatchEndedTerminated { get; set; }

        [Newtonsoft.Json.JsonProperty("responseToEffectType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardEffectType ResponseToEffectType { get; set; }

        [Newtonsoft.Json.JsonProperty("responseToEffectCard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Card ResponseToEffectCard { get; set; }

        [Newtonsoft.Json.JsonProperty("turnStartedDelta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IStateDelta TurnStartedDelta { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("playerIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerIndex { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MatchEventDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MatchEventDTO>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Match Response Movement DTO
    /// <br/>deliver selectively timestamp, sequence along with DTO array of events
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MoveDTO
    {
        [Newtonsoft.Json.JsonProperty("at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset At { get; set; }

        [Newtonsoft.Json.JsonProperty("sequenceId", Required = Newtonsoft.Json.Required.Always)]
        public double SequenceId { get; set; }

        [Newtonsoft.Json.JsonProperty("turnId", Required = Newtonsoft.Json.Required.Always)]
        public double TurnId { get; set; }

        [Newtonsoft.Json.JsonProperty("sequenceInTurnId", Required = Newtonsoft.Json.Required.Always)]
        public double SequenceInTurnId { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MatchEventDTO> Events { get; set; } = new System.Collections.ObjectModel.Collection<MatchEventDTO>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MoveDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MoveDTO>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Match creation parameters including players, drawpile, discardpile and randomseed
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MatchCreationParams
    {
        /// <summary>
        /// List of players. Omit to request a 'practice' match.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playerids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(2)]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public System.Collections.Generic.ICollection<string> Playerids { get; set; }

        /// <summary>
        /// Tags to add to match for later filtering
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; set; }

        /// <summary>
        /// [Debug purposes] Play Area initial contents of cards.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Card> PlayArea { get; set; }

        /// <summary>
        /// [Debug purposes] Draw pile initial contents of cards. When omitted default will be generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("drawPile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Card> DrawPile { get; set; }

        /// <summary>
        /// [Debug purposes] Discard pile initial contents of cards. When omitted default will be generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discardPile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Card> DiscardPile { get; set; }

        /// <summary>
        /// [Debug purposes] Banks initial contents of cards. When omitted match will start with empty banks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("banks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<Card>> Banks { get; set; }

        /// <summary>
        /// [Debug purposes] Optional seed value for pseudorandom generator used for randomization of starting player, card drawing.
        /// <br/>Match creation returns a the input or generated seed so you can recreate any game during development.
        /// <br/>To ignore randomization and pick first item always use "norandom".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("randomSeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RandomSeed { get; set; }

        /// <summary>
        /// Timeout - number of seconds after the match is considered stale and may be terminated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Timeout { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MatchCreationParams FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MatchCreationParams>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Card suit stack - for effective representation of bank collection ordered by suits
    /// <br/>consists of a set of cardvalues in the given suit stack
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CardSuitStack : System.Collections.ObjectModel.Collection<object>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CardSuitStack FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CardSuitStack>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Bank - object for a player's bank
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Bank : System.Collections.Generic.Dictionary<string, CardSuitStack>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Bank FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Bank>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Draw card pile - contains all remining cards
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DrawCardPile : System.Collections.ObjectModel.Collection<Card>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DrawCardPile FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DrawCardPile>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Discard pile - object to represent discard pile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DiscardCardPile : System.Collections.ObjectModel.Collection<Card>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DiscardCardPile FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DiscardCardPile>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Play area - object to represent the play area
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PlayArea : System.Collections.ObjectModel.Collection<Card>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayArea FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayArea>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Match state associated with an atomic event
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class State
    {
        [Newtonsoft.Json.JsonProperty("banks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Bank> Banks { get; set; } = new System.Collections.ObjectModel.Collection<Bank>();

        [Newtonsoft.Json.JsonProperty("drawPile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DrawCardPile DrawPile { get; set; }

        [Newtonsoft.Json.JsonProperty("discardPile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiscardCardPile DiscardPile { get; set; }

        [Newtonsoft.Json.JsonProperty("playArea", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PlayArea PlayArea { get; set; } = new PlayArea();

        [Newtonsoft.Json.JsonProperty("currentPlayerIndex", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? CurrentPlayerIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("pendingEffect", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CardEffect PendingEffect { get; set; }

        [Newtonsoft.Json.JsonProperty("winnerIdx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WinnerIdx { get; set; }

        [Newtonsoft.Json.JsonProperty("timeoutCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TimeoutCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static State FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<State>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Match Response item
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MatchDTO
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("playerids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Playerids { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("startedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartedAt { get; set; }

        [Newtonsoft.Json.JsonProperty("createdByPlayerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByPlayerId { get; set; }

        [Newtonsoft.Json.JsonProperty("creationParams", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MatchCreationParams CreationParams { get; set; }

        [Newtonsoft.Json.JsonProperty("lastMoveAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastMoveAt { get; set; }

        [Newtonsoft.Json.JsonProperty("moveCount", Required = Newtonsoft.Json.Required.Always)]
        public int MoveCount { get; set; }

        [Newtonsoft.Json.JsonProperty("turnCount", Required = Newtonsoft.Json.Required.Always)]
        public int TurnCount { get; set; }

        [Newtonsoft.Json.JsonProperty("moveCountInTurn", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? MoveCountInTurn { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public State State { get; set; }

        [Newtonsoft.Json.JsonProperty("stateAtTurnStart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public State StateAtTurnStart { get; set; }

        [Newtonsoft.Json.JsonProperty("playernames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Playernames { get; set; }

        [Newtonsoft.Json.JsonProperty("moves", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MoveDTO> Moves { get; set; }

        [Newtonsoft.Json.JsonProperty("drawPileSize", Required = Newtonsoft.Json.Required.Always)]
        public int DrawPileSize { get; set; }

        [Newtonsoft.Json.JsonProperty("discardPileSize", Required = Newtonsoft.Json.Required.Always)]
        public int DiscardPileSize { get; set; }

        [Newtonsoft.Json.JsonProperty("activePlayerIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivePlayerIndex { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MatchDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MatchDTO>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MatchHeaderFullDTO
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-f]{24}|[0-9a-f]{12}")]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sequence { get; set; }

        [Newtonsoft.Json.JsonProperty("lastmoveat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Lastmoveat { get; set; }

        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.Always)]
        public bool Finished { get; set; }

        [Newtonsoft.Json.JsonProperty("table", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Table Table { get; set; } = new Table();

        [Newtonsoft.Json.JsonProperty("playerdata", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Playerdata> Playerdata { get; set; } = new System.Collections.ObjectModel.Collection<Playerdata>();

        [Newtonsoft.Json.JsonProperty("startedat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Startedat { get; set; }

        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; set; }

        [Newtonsoft.Json.JsonProperty("playernames", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Playernames { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MatchHeaderFullDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MatchHeaderFullDTO>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum BoolLikeString
    {

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 3,

    }

    /// <summary>
    /// Match creation result
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MatchCreateResponse
    {
        [Newtonsoft.Json.JsonProperty("randomSeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RandomSeed { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-f]{24}|[0-9a-f]{12}")]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MatchCreateResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MatchCreateResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ErrorResponse
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum MatchActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draw")]
        Draw = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ResponseToEffect")]
        ResponseToEffect = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EndTurn")]
        EndTurn = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CardEffectResponse
    {
        [Newtonsoft.Json.JsonProperty("effectType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardEffectType EffectType { get; set; }

        [Newtonsoft.Json.JsonProperty("card", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Card Card { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CardEffectResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CardEffectResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// User action sent by the player
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IUserAction
    {
        [Newtonsoft.Json.JsonProperty("etype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MatchActionType Etype { get; set; }

        [Newtonsoft.Json.JsonProperty("effect", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CardEffectResponse Effect { get; set; }

        [Newtonsoft.Json.JsonProperty("autopick", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Autopick { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IUserAction FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IUserAction>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PlayerDTO
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-f]{24}|[0-9a-f]{12}")]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayerDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayerDTO>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SessionData
    {
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("dbname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Dbname { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Role { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SessionData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SessionData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SessionUserData
    {
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Role { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SessionUserData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SessionUserData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Body
    {
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("winnerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9a-f]{24}|[0-9a-f]{12}")]
        public string WinnerId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Anonymous
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Anonymous FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Response
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Response FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Table
    {
        [Newtonsoft.Json.JsonProperty("discardpile", Required = Newtonsoft.Json.Required.Always)]
        public int Discardpile { get; set; }

        [Newtonsoft.Json.JsonProperty("drawpile", Required = Newtonsoft.Json.Required.Always)]
        public int Drawpile { get; set; }

        [Newtonsoft.Json.JsonProperty("playarea", Required = Newtonsoft.Json.Required.Always)]
        public int Playarea { get; set; }

        [Newtonsoft.Json.JsonProperty("effect", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardEffectType Effect { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Table FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Table>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Playerdata
    {
        [Newtonsoft.Json.JsonProperty("bankvalue", Required = Newtonsoft.Json.Required.Always)]
        public int Bankvalue { get; set; }

        [Newtonsoft.Json.JsonProperty("banksize", Required = Newtonsoft.Json.Required.Always)]
        public int Banksize { get; set; }

        [Newtonsoft.Json.JsonProperty("winner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Winner { get; set; }

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Playerdata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Playerdata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.1.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603