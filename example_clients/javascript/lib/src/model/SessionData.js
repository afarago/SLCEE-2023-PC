/**
 * SLCEE-2023-PC Arena
 * **SAP Labs CEE Hub Programming Competition 2023 Arena server**.  You can find more information about the game and the competititon rules at [github/SLCEE-2023-PC-public](https://github.com/afarago/SLCEE-2023-PC-public).   For a test run, you can use the crash test dummy user `000000000000000000000000/dummypass`.   *Note: All the APIs expect and return application/json*.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: DL SLCEE 2023 PC <DL_637A3F6466D808029A65636A@global.corp.sap>
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SessionData model module.
 * @module model/SessionData
 * @version 1.0.0
 */
class SessionData {
    /**
     * Constructs a new <code>SessionData</code>.
     * @alias module:model/SessionData
     * @param ip {String} 
     * @param dbname {String} 
     * @param role {String} 
     * @param name {String} 
     * @param username {String} 
     */
    constructor(ip, dbname, role, name, username) { 
        
        SessionData.initialize(this, ip, dbname, role, name, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ip, dbname, role, name, username) { 
        obj['ip'] = ip;
        obj['dbname'] = dbname;
        obj['role'] = role;
        obj['name'] = name;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>SessionData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SessionData} obj Optional instance to populate.
     * @return {module:model/SessionData} The populated <code>SessionData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SessionData();

            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('dbname')) {
                obj['dbname'] = ApiClient.convertToType(data['dbname'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SessionData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SessionData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SessionData.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['dbname'] && !(typeof data['dbname'] === 'string' || data['dbname'] instanceof String)) {
            throw new Error("Expected the field `dbname` to be a primitive type in the JSON string but got " + data['dbname']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

SessionData.RequiredProperties = ["ip", "dbname", "role", "name", "username"];

/**
 * @member {String} ip
 */
SessionData.prototype['ip'] = undefined;

/**
 * @member {String} dbname
 */
SessionData.prototype['dbname'] = undefined;

/**
 * @member {String} role
 */
SessionData.prototype['role'] = undefined;

/**
 * @member {String} name
 */
SessionData.prototype['name'] = undefined;

/**
 * @member {String} username
 */
SessionData.prototype['username'] = undefined;






export default SessionData;

